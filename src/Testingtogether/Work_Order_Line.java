/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Testingtogether;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andrew Choe
 */
public class Work_Order_Line extends javax.swing.JFrame {

    /**
     * Creates new form HOA
     */
    public Work_Order_Line() {
        initComponents();
        updateWOLSCombo();   
    }
        String driver="com.microsoft.sqlserver.jdbc.SQLServerDriver";
        String url="jdbc:sqlserver://DESKTOP-RQELHUF\\:1433;databaseName=CIS3365 Shasta Analysts";
        String user="shasta";
        String pass="admin";
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        WOLtable = new javax.swing.JTable();
        WorkOrderIDtxt = new javax.swing.JTextField();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        WorkOrderLinetxt = new javax.swing.JTextField();
        SubContractorServicetxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        WorkOrderLineStatusDD = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("Work Order Line Status ID");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setText("Work Order ID");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 255));
        jLabel6.setText("Buttons");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("Work Order Line");

        WOLtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Work Order Line ID", "Work Order Line Status ID", "Work Order ID", "Sub Contractor Service ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(WOLtable);

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel8.setText("Work Order Line ID");

        WorkOrderLinetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkOrderLinetxtActionPerformed(evt);
            }
        });

        SubContractorServicetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubContractorServicetxtActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel10.setText("Sub Contractor Service ID");

        btnNew.setText("View Table");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        WorkOrderLineStatusDD.setToolTipText("");
        WorkOrderLineStatusDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkOrderLineStatusDDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WorkOrderIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SubContractorServicetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(WorkOrderLineStatusDD, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(WorkOrderLinetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNew, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btnNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnInsert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel8)
                                            .addComponent(WorkOrderLinetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(WorkOrderLineStatusDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(jLabel1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(WorkOrderIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SubContractorServicetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void updateWOLSCombo(){
        try{    
        Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String sql = "select * from WorkOrderLineStatus";
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs=pst.executeQuery();
            while(rs.next()){
                WorkOrderLineStatusDD.addItem(rs.getString("WorkOrderLineStatusName"));
            }
            
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        
        }
        
        
    }
    
    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        try
        {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String sql = "insert into WorkOrderLine"
            +"(WorkOrderLineStatusID, WorkOrderID, SubContractorServiceID)"
            +"values(?, ?, ?)";
            
           
            int WOLSid = 0;
            switch (WorkOrderLineStatusDD.getSelectedItem().toString()){
                case "Awaiting Inspection": WOLSid=1;
                            break;
                case "Awaiting HOA Approval": WOLSid=2;
                            break;
                case "Awaiting Permit(s)": WOLSid=3;
                            break;
                case "New Request": WOLSid=4;
                            break;
                case "In-Progress": WOLSid=5;
                            break;
                case "Pending": WOLSid=6;
                            break;
                case "Cancelled by Employee": WOLSid=7;
                            break;
                case "Cancelled by Customer": WOLSid=8;
                            break;
                case "Complete": WOLSid=9;
                            break;
                case "Weather Delay": WOLSid=10;
                            break;
                case "Customer Delay": WOLSid=11;
                            break;
                case "Payment Pending": WOLSid=12;
                            break;
                case "Reviewing Feedback": WOLSid=13;
                            break;
                case "Reviewing Modification(s)": WOLSid=14;
                            break;
                case "Parts on Order": WOLSid=15;
                            break;
                case "Materials Retrieved": WOLSid=16;
                            break;
                case "Awaiting Subcontractor Assignment": WOLSid=17;
                            break;
                case "Closed": WOLSid=18;
                            break;
                case "Awating Additional Information": WOLSid=19;
                            break;
                case "Awaiting Funding": WOLSid=20;
                            break;
                case "Deferred": WOLSid=21;
                            break;
                case "Declined": WOLSid=22;
                            break;
                case "Duplicate Request": WOLSid=23;
                            break;
                case "Void": WOLSid=24;
                            break;
                case "Final Walkthrough Scheduled": WOLSid=25;
                            break;
                case "Final Walkthrough Completed": WOLSid=26;
                            break;
            }
            
            
             
            
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, String.valueOf(WOLSid));
            pst.setString(2, WorkOrderIDtxt.getText());
            pst.setString(3, SubContractorServicetxt.getText());
            
          

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Insert Successfully");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try
        {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String sql = "update WorkOrderLine set WorkOrderLineStatusID = ?, WorkOrderID = ?, SubContractorServiceID = ?";

            int WOLSid = 0;
            switch (WorkOrderLineStatusDD.getSelectedItem().toString()){
                case "Awaiting Inspection": WOLSid=1;
                            break;
                case "Awaiting HOA Approval": WOLSid=2;
                            break;
                case "Awaiting Permit(s)": WOLSid=3;
                            break;
                case "New Request": WOLSid=4;
                            break;
                case "In-Progress": WOLSid=5;
                            break;
                case "Pending": WOLSid=6;
                            break;
                case "Cancelled by Employee": WOLSid=7;
                            break;
                case "Cancelled by Customer": WOLSid=8;
                            break;
                case "Complete": WOLSid=9;
                            break;
                case "Weather Delay": WOLSid=10;
                            break;
                case "Customer Delay": WOLSid=11;
                            break;
                case "Payment Pending": WOLSid=12;
                            break;
                case "Reviewing Feedback": WOLSid=13;
                            break;
                case "Reviewing Modification(s)": WOLSid=14;
                            break;
                case "Parts on Order": WOLSid=15;
                            break;
                case "Materials Retrieved": WOLSid=16;
                            break;
                case "Awaiting Subcontractor Assignment": WOLSid=17;
                            break;
                case "Closed": WOLSid=18;
                            break;
                case "Awating Additional Information": WOLSid=19;
                            break;
                case "Awaiting Funding": WOLSid=20;
                            break;
                case "Deferred": WOLSid=21;
                            break;
                case "Declined": WOLSid=22;
                            break;
                case "Duplicate Request": WOLSid=23;
                            break;
                case "Void": WOLSid=24;
                            break;
                case "Final Walkthrough Scheduled": WOLSid=25;
                            break;
                case "Final Walkthrough Completed": WOLSid=26;
                            break;
            }
            
            
             
            
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, String.valueOf(WOLSid));
            pst.setString(2, WorkOrderIDtxt.getText());
            pst.setString(3, SubContractorServicetxt.getText());
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Update Successfully");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try
        {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String sql = "Delete from WorkOrderLine where WorkOrderLineID = ?";

            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, WorkOrderLinetxt.getText());

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Delete Successfully");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void WorkOrderLinetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkOrderLinetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WorkOrderLinetxtActionPerformed

    private void SubContractorServicetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubContractorServicetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SubContractorServicetxtActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        
         try
        {
         
               Connection con=DriverManager.getConnection(url,user,pass);
               String sql="select * from WorkOrderLine";
               PreparedStatement pst=con.prepareStatement(sql);
               ResultSet rs=pst.executeQuery();
               DefaultTableModel WOLTM=(DefaultTableModel)WOLtable.getModel();
               WOLTM.setRowCount(0);
               
               while(rs.next())
               {
                   Object o[]={rs.getString("WorkOrderLineID"),rs.getString("WorkOrderLineStatusID"),rs.getString("WorkOrderID"),rs.getString("SubContractorServiceID")};
                   WOLTM.addRow(o);
               }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
        
        
    }//GEN-LAST:event_btnNewActionPerformed

    private void WorkOrderLineStatusDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkOrderLineStatusDDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WorkOrderLineStatusDDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Work_Order_Line.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Work_Order_Line.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Work_Order_Line.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Work_Order_Line.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Work_Order_Line().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField SubContractorServicetxt;
    private javax.swing.JTable WOLtable;
    private javax.swing.JTextField WorkOrderIDtxt;
    private javax.swing.JComboBox<String> WorkOrderLineStatusDD;
    private javax.swing.JTextField WorkOrderLinetxt;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
